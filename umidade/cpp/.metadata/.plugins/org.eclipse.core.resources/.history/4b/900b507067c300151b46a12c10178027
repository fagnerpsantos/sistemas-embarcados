#include <fcntl.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <syslog.h>
#include <string.h>
#include <signal.h>

using namespace std;

#define ARQUIVO_LOG 	"/home/fagnerpsantos/Developer/Arduino/sistemas-embarcados/umidade_wot/cpp/sensoriamentod/sensoriamento.log"
#define ARQUIVO_PIPE 	"/home/fagnerpsantos/Developer/Arduino/sistemas-embarcados/umidade_wot/cpp/sensoriamentod/sensoriamentop"

bool continuar = true;
int sensores = 0;
char* porta ="/dev/ttyUSB0";
int hPorta=0;
bool portaIniciada = false;
int resultado = EXIT_SUCCESS;

int daemonize() {
	int resultado = EXIT_SUCCESS;

	pid_t daemon_id = 0;
	pid_t sid = 0;

	daemon_id = fork();


	if (daemon_id < 0) {
		cout << "Falha de criação do daemon!" << endl;
		resultado = EXIT_FAILURE;
	} else {
		if (daemon_id > 0) {
			cout << "Daemon criado! Saindo do processo principal." << endl;

			exit(0);
		}
		// CONFIGURA SESSÃO DE EXECUCAO DO DAEMON - START - STOP
		umask(0);

		sid = setsid();
		if (sid < 0) {
			exit(1);
		}

		// DESLIGA OS RECURSOS DE ENTRADA E SAIDA DE DADOS
		close(STDIN_FILENO);
		close(STDOUT_FILENO);
		close(STDERR_FILENO);
	}

	return resultado;
}

bool pipeIniciado() {

	// CRIA O ARQUIVO DE PIPE
	// PERMISSÃO DE LEITURA E ESCRITA NO ARQUIVO
	int resultado = mkfifo(ARQUIVO_PIPE, 0x666);
	return (resultado != -1);
}



int lerSensores() {
	//sensores++;

	read(hPorta, (int*)&sensores, sizeof(sensores));
	usleep(100*1000);

	return sensores;
}

void tratarSinal(int sinal) {
	//tratamento para os sinais de parada
	//do daemon (o daemon deve parar)
	switch (sinal) {
	case SIGHUP:
		continuar = false;
		break;
	case SIGTERM:
		continuar = false;
		break;
	case SIGQUIT:
		continuar = false;
		break;
	default:
		break;
	}

}

int enviarParaPipe(int sensores) {
	int bytes = 0;

	//abrir o PIPE (abrir o arquivo)
	int apipe = open(ARQUIVO_PIPE, O_RDWR);

	if (apipe != -1) {
		//converter sensores inteiro para string
		//a integracao funciona melhor com strings
		stringstream ss;
		ss << sensores;
		string strSensores = ss.str();

		//escrever a string de sensores no PIPE
		bytes = write(apipe, strSensores.c_str(), strSensores.length());
	}
	//fechar o PIPE
	close(apipe);

	return bytes;
}

void iniciarTratamentoSinais() {
	//mapeamento entre sinal e funcao
	//de tratamento de sinais
	signal(SIGHUP, tratarSinal);
	signal(SIGTERM, tratarSinal);
	signal(SIGINT, tratarSinal);
	signal(SIGQUIT, tratarSinal);
}

void IniciarConexao(){
	hPorta  = open(porta, O_RDWR | O_NOCTTY | O_NDELAY);
			if (hPorta == -1){ // nao conseguiu pegar a porta retorna que falhou
				resultado = EXIT_FAILURE;
				usleep(3000*1000);
			} else { //configuraçao que precisa
				fcntl(hPorta, F_SETFL, 0);
				resultado = EXIT_SUCCESS;
			}

}

int main(int arg, char* argv[]) {

	//se for possivel criar o DAEMON
	if(daemonize() == EXIT_SUCCESS){
		//inicia-se o tratamento de sinais
		iniciarTratamentoSinais();
		//e o log para registro de operacoes
		ofstream log(ARQUIVO_LOG, ios_base::out | ios_base::app);
		log << "Arquivo de log iniciado!" << endl;

		log << "Pipe sendo criado" << endl;
		if(!pipeIniciado()){
			log << "Falha na inicializacao do PIPE" << endl;
			exit(1);
		}

		continuar = true;
		while(continuar){

			IniciarConexao();
			//a leitura dos sensores
			int sensores = lerSensores();

			if(resultado == 0){
				log << "Enviando sensores: " << sensores << endl;
				//e o envio para o PIPE
				enviarParaPipe(sensores);
				sleep(1);
			} else {
				log << "Problemas ao conectar com a porta."<<endl;
			}
		}

		//remove o arquivo do PIPE apos uso/finalizacao
		unlink(ARQUIVO_PIPE);

		log << "Daemon de sensoriamento finalizado." << endl;
	}

	return 0;
}
