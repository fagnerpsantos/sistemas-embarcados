/*
 * daemon.cpp
 *
 *Leitor de sensores que executa em background no LINUX.
 *Pode ser iniciado e parada a partir da linha de comando.
 *Pode
 *  Created on: 07/01/2016
 *      Author: fagnerpsantos e anapandrade
 */

#include <fcntl.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <syslog.h>
#include <string.h>
#include <signal.h>


using namespace std;

#define ARQUIVO_LOG "/temp/sensoriamento.log" // Colocar o endereço
#define ARQUIVO_PIPE "" //Colocar endereço


bool continuar = true;


bool pipeIniciado(){
	int resultado = mkfifo(ARQUIV0_PIPE, 0666);

	return (resultado != -1);

}

int enviarParaPipe(int sensores){
	int bytes = 0;
	int apipe = open(ARQUIVO_PIPE, 0_RDWR);
	if(apipe != -1){
		stringstream ss;
		ss << sensores;
		string strSensores = ss.str();

		bytes = write(apipe, strSensores.c_str(), strSensores.lenght());
	}
	close(apipe);

	return bytes;
}

void tratarSinal(int sinal){
	switch (sinal){
	case SIGHUP:
		continuar = false;
		break;
	case SIGTERM:
		continuar = false;
		break;
	case SIGQUIT:
		continuar = false;
		break;
	default:
		break;
	}
}

void iniciarTratamentoSinais() {
	signal(SIGHUP, tratarSinal);
	signal(SIGTERM, tratarSinal);
	signal(SIGINT, tratarSinal);
	signal(SIGQUIT, tratarSinal);


}

int main(int argc, char* argv[]) {

	pid_t daemon_id = 0;
	 pid_t sid = 0;

	 daemon_id = fork();
	 if (daemon_id < 0){
		 cout << "Falha de criação do daemon!" << endl;
		 exit(1);
	 }
		 cout << "Daemon criado! Saindo do processo principal" << endl;



		 close(STDIN_FILENO);
		 close(STDOUT_FILENO);
		 close(STDERR_FILENO);

		 sid = setsid();
		 if (sid < 0){
			 exit(1);
		 }


		iniciarTratamentoSinais();

		ofstream log(" ", ios_base::out | ios_base::app);

			log << "Arquivo de log iniciado!" << endl;

		log << "Daemon inicializado com sucesso" << endl;
		log << "Pi/media/fagnerpsantos/C14A-A3B5/init.dpe sendo criado... " << endl;

		if (!pipeIniciado()){
           log << "Falha de inicializacao do PIPE" << endl;

           exit(1);
		}

		continuar = true;
		while (continuar){
			int sensores = lerSensores();

			enviarParaPipe(sensores);

			sleep(1);
		}

		unlink(ARQUIVO_PIPE);

		log << "Daemon de sensoriamento finalizado!" << endl;



	return EXIT_SUCCESS;

}



